<?xml version="1.0"?>
<!--
  $Id: build.xml 485 2008-06-28 14:07:47Z etienne_sf $
  
  =======================================================================
         Ant build file FOR documentation of translation for JUpload2
         
         Version $Revision: 485 $
         
  =======================================================================
-->

<project name="jupload2_translation" default="formatAll" basedir=".">


	<!-- Definition du classpath des tÃ¢ches ant additionnelles  -->
	<path id="ant.tasks.ant-contrib.classpath">
		<fileset dir="../../lib">
			<include name="ant-contrib.jar" />
		</fileset>
	</path>
	<taskdef resource="net/sf/antcontrib/antcontrib.properties"
	         classpathref="ant.tasks.ant-contrib.classpath" />

	<!-- path to the svnant libraries. -->
	<path id="translation.svnant.classpath">
		<fileset dir="../../lib/svn-ant">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<!-- load the svn task -->
	<typedef resource="org/tigris/subversion/svnant/svnantlib.xml"
	         classpathref="translation.svnant.classpath" />


	<!--
		A debug task, to format one file only.
	-->
	<target name="debug" depends="initEnv,initDebug,formatAll">
	</target>


	<!-- Any initialization needed in debug mode -->
	<target name="initDebug" depends="initEnv, restoreFiles">
	</target>

	<!--
		Just for debug: restore original files, to allow replaying. Useful, as the scripts update
		the original files (for instance, to add a newly created item)
	-->
	<target name="restoreFiles">
		<echo level="info" message="Restoring test case, from test.back" />
		<!-- copy toDir="${translation.text.applet.dir}" overwrite="true">
			<path>
				<fileset dir="${translation.text.dir}/applet.utf-16/original_files" />
			</path>
		</copy -->
		<delete>
			<fileset dir="${translation.text.applet.dir}" includes="*" />
		</delete>
		<native2ascii src="${translation.applet.package.lang}"
		              dest="${translation.text.applet.dir}"
		              reverse="true"
		              encoding="${translation.encoding}">
			<!-- include name="lang.properties" />
			<include name="lang_fr.properties" / -->
		</native2ascii>
	</target>

	<!--
		Init the global parameters. Loads the config files, and displays any starting message.
	-->
	<target name="initEnv">
		<loadproperties srcFile="conf/global.properties" />
		<!-- We restore test files. This will do something only if configured to. -->
		<!-- antcall target="restoreFiles" / -->
		<mkdir dir="${translation.text.temp.dir}" />
		<svn javahl="${svn.use.javahl}" failonerror="false">
			<ignore file="${translation.text.temp.dir}" />
		</svn>

		<!-- Let's display some inmportant property values -->
		<echo level="info"
		      message="translation.encoding: ${translation.encoding}" />

		<!-- Let's initialize the html summary file -->
		<echo level="info"
		      message="Intializing translation summary, from ${translationPresentation.template.html.file}" />
		<echo level="info"
		      message="   to ${translationPresentation.target.html.file}" />
		<copy file="${translationPresentation.template.html.file}"
		      toFile="${translationPresentation.target.html.file}"
		      overwrite="true" />
	</target>


	<!--
		Refresh an eclipse folder ... if within eclipse.
	-->
	<target name="refresh"
	        depends="refresh.if_in_eclipse, refresh.if_not_in_eclipse">
	</target>
	<target name="refresh.if_in_eclipse" if="eclipse.running">
		<echo level="info" message="[Within eclipse] Refreshing ${param}" />
		<eclipse.refreshLocal resource="${param}" depth="infinite" />
	</target>
	<target name="refresh.if_not_in_eclipse" unless="eclipse.running">
		<echo message="[Out of eclipse] No refresh of ${param}" />
		<echo message="[Out of eclipse] To refresh ressource in eclipse, you must execute ant within the eclipse JRE" />
	</target>

	<!--
		Generates the applet properties files, in UTF-16, from the unicode or latin-1 files, 
		coming from the wjhk.jupload2.lang package, in the applet source itself.
		This should be used only at initialization of the translation files.
	-->
	<target name="initEncodedFilesFromLangPackage" depends="initEnv">
		<native2ascii src="${translation.applet.package.lang}"
		              dest="${translation.text.applet.dir}"
		              encoding="${translation.encoding}"
		              reverse="true" />
	</target>

	<!-- 
		generateLangTemplate generated the template for utf-16 translation files, from the
		lang_en.properties, which must be correct.
		Based on this template, all other utf-16 translation files will be re-formated, to be 
		easily compared: see target formatAllLangProperties.
	-->
	<target name="generateLangTemplate" depends="initEnv">
		<echo level="info" message="Generating template:" />
		<echo level="info" message=" from ${langProperties.source.file}" />
		<echo level="info" message=" to ${langProperties.template.file}" />
		<copy file="${langProperties.source.file}"
		      overwrite="true"
		      tofile="${langProperties.template.file}"
		      encoding="${translation.encoding}"
		      outputencoding="${translation.encoding}" />

		<!-- Let's create the lines: property = #property# -->
		<replaceregexp file="${langProperties.template.file}"
		               match="^(.*) *= *(.*)$"
		               flags="gm"
		               replace="\1=#\1#"
		               encoding="${translation.encoding}" />

		<!--This generates some erroneous lines, with a space before the #:
					buttonBrowse =#buttonBrowse #
			Let's remove them.
		-->
		<replaceregexp file="${langProperties.template.file}"
		               match=" #"
		               flags="g"
		               replace="#"
		               encoding="${translation.encoding}" />

		<!-- A little space after the equal looks better. -->
		<replaceregexp file="${langProperties.template.file}"
		               match="=#"
		               flags="g"
		               replace="= #"
		               encoding="${translation.encoding}" />

		<!-- Let's try to refresh the eclipse template file -->
		<antcall target="refresh">
			<param name="param" value="${langProperties.template.file}" />
		</antcall>
	</target>

	<!-- 
		re-format all utf-16 lang property files, according to the lang template. All missing
		properties are commented, like this:
		#MISSING  propertyName = EnglishText
		The lang template is generated by the English translation by generateLangTemplate.
	-->
	<target name="formatAllLangProperties"
	        depends="initEnv,generateLangTemplate">
		<foreach target="formatOneLangProperty"
		         param="param.file"
		         inheritall="true">
			<path>
				<fileset dir="${translation.text.applet.dir}"
				         includes="*.properties" />
			</path>
		</foreach>
	</target>

	<!--
		Execute all formatting actions. This is the default tasks for this project.
	-->
	<target name="formatAll" depends="formatAllLangProperties,finishProcess">
		<!-- Just an empty container, to call the necessary tasks -->
		<echo level="info"
		      message="Normal completion of full translation files generation" />
	</target>

	<!--
		Finish all actions, once each file has been managed.
		- Finish the translation presentation
		- Translate back properties file, into the wjhk.jupload.lang
	-->
	<target name="finishProcess" depends="finishHtmlTranslationPresentation">
		<native2ascii src="${translation.text.applet.dir}"
		              dest="${translation.applet.package.lang}"
		              encoding="${translation.encoding}" />
	</target>

	<!-- ==============================================================================================
		Above this limit are the target that are called once for the whole process.
		
		Below this limit are the target that are called once for each language.
		(see the foreach loop, in the formatAllLangProperties target)
	============================================================================================== -->

	<!--
		Extraction of the parameter for the current language.
	-->
	<target name="extractCurrentLanguageParameter">
		<!-- 
			Get the name of the file, without the path and the .properties extension, 
			to allow conditional statement.
		-->
		<propertyregex property="param.filename"
		               override="true"
		               input="${param.file}"
		               regexp="[/\\]([^/\\]*).properties$"
		               select="\1" />

		<!--
			Get the name of the file, without the path but with the .properties extension, 
			for the translate call. 
		-->
		<propertyregex property="param.file.bundlename"
		               override="true"
		               input="${param.file}"
		               regexp="(.*).properties$$"
		               replace="\1" />
		<property name="temp.workingTranslationFile"
		          value="${translation.text.temp.dir}/${langProperties.template.filename}" />

		<!-- Let's load the properties file, to get the language and the contributor. -->
		<echo level="info"
		      message="Loading properties from ${param.file}, encoding: ${translation.encoding}" />
		<!-- Seems like loadproperties doesn't like UTF-16 very much. Let's create a temporary UTF-8 file -->
		<copy file="${param.file}"
		      overwrite="true"
		      tofile="${param.file}.tmp"
		      encoding="${translation.encoding}"
		      outputencoding="ISO-8859-1" />
		<loadproperties srcFile="${param.file}.tmp">
			<filterchain>
				<prefixlines prefix="param.java." />
			</filterchain>
		</loadproperties>
		<delete file="${param.file}.tmp" />

		<if>
			<not>
				<and>
					<isset property="param.java.language" />
					<isset property="param.java.contributor" />
				</and>
			</not>
			<then>
				<fail message="language or contributor not set in ${param.file}" />
			</then>
		</if>

		<!-- Should we generate this file ? -->
		<if>
			<equals arg1="${param.java.generateHtmlFileForTranslators}"
			        arg2="true" />
			<then>
				<property name="param.generateThisFile" value="true" />
			</then>
		</if>

		<echo level="info"
		      message="Translating: ${param.filename}, ${param.java.language} (path: ${param.file})" />
		<!-- echo message="param.file.bundlename: ${param.file.bundlename}" />
		<echo level="info" message="    dest_dir: ${translation.text.applet.dir}" />
		<echo level="info" message="    template: ${langProperties.template.file}" />
		<echo level="info" message="    temp.workingTranslationFile: ${temp.workingTranslationFile}" /-->
	</target>

	<!--
		Complete the html translation presentation, that contains a link to each translation, with the current language.
		The way it works: 
		1) The file is initialized from the translation presentation template.
		2) For each language, the #translation# token is replaced by: 
			NewTranslation option<BR>
			#translation#
			
			To do that: 
			- We first copy to a temporary file (because the copy need to create a new file)
			- The #translation# token is replaced by the translation line, and a new token to allow adding the next 
			language. This 'new' token must be different than #translation#, otherwise we get a 'token loop'. So the
			#translation# token is replaced by :    NewTranslation option<BR>#translation#
			- The #translation2# is replaced by #translation" in a copy to the originale file.
			- The temporary file is removed			
			
		3) After the end of the foreach loop, the #translation# token is removed (replaced by null). 
		See the generateHtmlTranslationPresentation target. 
	-->
	<target name="defineParamGenerateThisFile">
		<property name="param.generateThisFile"
		          value="True, to finish the HTMl part (remove the #translation# token)" />
	</target>
	<target name="finishHtmlTranslationPresentation"
	        depends="defineParamGenerateThisFile, generateHtmlTranslationPresentation" />
	<!-- generateHtmlTranslationPresentation is called by: 
		- executeFormatOneLangProperty (for each file)
		- finishHtmlTranslationPresentation (at the end of the process, once ecah file has been processed)
	-->
	<target name="generateHtmlTranslationPresentation"
	        if="param.generateThisFile">
		<if>
			<isset property="param.filename" />
			<then>
				<!-- temp.translation is set only when this target is called from formatOneLangProperty  -->
				<property name="temp.translation"
				          value="
&lt;LI&gt;&lt;A HREF='${param.filename}.html'&gt;${param.java.language}&lt;/A&gt; 
contributor(s): ${param.java.contributor}&lt;/LI&gt; 
#translation2#
" />
			</then>
			<else>
				<!-- temp.translation is not set, when called from the main stream. We then remove the #translation# token -->
				<property name="temp.translation" value="" />
			</else>
		</if>
		<!-- Creation of a new file, with this translation added -->
		<echo level="info"
		      message="Working on ${translationPresentation.target.html.file} file" />
		<copy toFile="${translationPresentation.target.html.file}2"
		      overwrite="true"
		      encoding="${translation.encoding}"
		      outputencoding="${translation.encoding}">
			<fileset file="${translationPresentation.target.html.file}" />
			<filterset begintoken="#" endtoken="#">
				<filter token="encoding" value="${translation.encoding}" />
				<filter token="translation" value="${temp.translation}" />
			</filterset>
		</copy>
		<!-- In the step above, we have to respect constraints of the ant Copy target. So we:
			1) Create a new file
			2) Create a token translation2, when replacing the translation token.
			We correct that (copy the new file to the real target file, and change translation2 by translation
		-->
		<!-- Move the new file to its target (that is ... the file we copied from, just above! -->
		<copy toFile="${translationPresentation.target.html.file}"
		      overwrite="true"
		      encoding="${translation.encoding}"
		      outputencoding="${translation.encoding}">
			<fileset file="${translationPresentation.target.html.file}2" />
			<filterset begintoken="#" endtoken="#">
				<filter token="translation2" value="#translation#" />
			</filterset>
		</copy>
		<!-- The, we remove the temp file -->
		<delete file="${translationPresentation.target.html.file}2" />
	</target>


	<!--
		Execute all formatting for one language. Called by a foreach loop, in the formatAllLangProperties target.
	-->
	<target name="executeFormatOneLangProperty"
	        depends="extractCurrentLanguageParameter,generateHtmlTranslationPresentation">

		<!-- 
				Translation of the translation template. 
				We'll move this file to the target file, once everything is finished. 
		-->
		<translate toDir="${translation.text.temp.dir}"
		           starttoken="#"
		           endtoken="#"
		           bundle="${param.file.bundlename}"
		           forceoverwrite="yes"
		           bundlelanguage=""
		           bundlecountry=""
		           bundlevariant=""
		           srcencoding="${translation.encoding}"
		           destencoding="${translation.encoding}"
		           bundleencoding="${translation.encoding}">
			<fileset file="${langProperties.template.file}" />
		</translate>

		<!-- 
			We replace all non translated text (property = #property#) by a line of this kind:
			#MISSING property = EnglishTranslation
			This will allow an easy translation of these texts.
		-->
		<replaceregexp file="${temp.workingTranslationFile}"
		               match="(.*) = #(.*)#$"
		               flags="gm"
		               replace="#MISSING \1 = #\2#"
		               encoding="${translation.encoding}" />

		<!-- 
			Now, we replace all missing text (#\2# above) by the English text,
			to allow an easy translation 
		-->
		<translate toDir="${translation.text.applet.dir}"
		           starttoken="#"
		           endtoken="#"
		           bundle="${langProperties.source.bundle}"
		           forceoverwrite="yes"
		           bundlelanguage=""
		           bundlecountry=""
		           bundlevariant=""
		           srcencoding="${translation.encoding}"
		           destencoding="${translation.encoding}"
		           bundleencoding="${translation.encoding}">
			<fileset file="${temp.workingTranslationFile}" />
		</translate>

		<!-- 
			The current name is FullPathOfTranslatedText/lang.properties.template
			Let's rename it to the target file.
		-->
		<move file="${translation.text.applet.dir}/${langProperties.template.filename}"
		      tofile="${param.file}" />

		<!--
			The objective for all that is to create the file that'll go in the applet
			package. 
		-->
		<native2ascii src="${translation.text.applet.dir}"
		              dest="${translation.applet.package.lang}"
		              includes="${param.filename}"
		              encoding="${translation.encoding}" />

		<!--
			We now generate the HTML page, that will be displayed to potential translator, who do not
			have access to the SVN. This page is available on the jupload project web site.
		-->
		<loadfile srcFile="${param.file}"
		          property="temp.translation.applet.result"
		          encoding="${translation.encoding}" />
		<if>
			<or>
				<not>
					<isset property="param.java.coppermine.language" />
				</not>
				<equals arg1="${param.java.coppermine.language}" arg2="" />
			</or>
			<then>
				<!-- No translation: we display the English version -->
				<loadfile srcFile="${coppermine.juploadplugin.root.dir}/english.php"
				          property="temp.translation.copperminePlugin.filecontent"
				          encoding="UTF-8" />
			</then>
			<else>
				<loadfile srcFile="${coppermine.juploadplugin.root.dir}/${param.java.coppermine.language}.php"
				          property="temp.translation.copperminePlugin.filecontent"
				          encoding="UTF-8" />
			</else>
		</if>
		<!-- To have a correct display, let's replace < by &lt; -->
		<propertyregex property="temp.translation.copperminePlugin.result"
		               input="${temp.translation.copperminePlugin.filecontent}"
		               regexp="&#60;"
		               global="true"
		               replace="&amp;lt;" />

		<copy toFile="${translation.html.dest.dir}/${param.filename}.html"
		      overwrite="true"
		      encoding="${translation.encoding}"
		      outputencoding="${translation.encoding}">
			<fileset file="${oneHtml.template.html.file}" />
			<filterset begintoken="#" endtoken="#">
				<filter token="encoding" value="${translation.encoding}" />
				<filter token="language" value="${param.file}" />
				<filter token="appletTranslation"
				        value="${temp.translation.applet.result}" />
				<filter token="copperminePluginTranslation"
				        value="${temp.translation.copperminePlugin.result}" />
			</filterset>
		</copy>

	</target>
	<!--
		Execute all formatting for one language. Called by a foreach loop, in the formatAllLangProperties target.
	-->
	<target name="formatOneLangProperty"
	        depends="extractCurrentLanguageParameter,generateHtmlTranslationPresentation"
	        if="param.generateThisFile">

		<!-- 
				Translation of the translation template. 
				We'll move this file to the target file, once everything is finished. 
		-->
		<translate toDir="${translation.text.temp.dir}"
		           starttoken="#"
		           endtoken="#"
		           bundle="${param.file.bundlename}"
		           forceoverwrite="yes"
		           bundlelanguage=""
		           bundlecountry=""
		           bundlevariant=""
		           srcencoding="${translation.encoding}"
		           destencoding="${translation.encoding}"
		           bundleencoding="${translation.encoding}">
			<fileset file="${langProperties.template.file}" />
		</translate>

		<!-- 
			We replace all non translated text (property = #property#) by a line of this kind:
			#MISSING property = EnglishTranslation
			This will allow an easy translation of these texts.
		-->
		<replaceregexp file="${temp.workingTranslationFile}"
		               match="(.*) = #(.*)#$"
		               flags="gm"
		               replace="#MISSING \1 = #\2#"
		               encoding="${translation.encoding}" />

		<!-- 
			Now, we replace all missing text (#\2# above) by the English text,
			to allow an easy translation 
		-->
		<translate toDir="${translation.text.applet.dir}"
		           starttoken="#"
		           endtoken="#"
		           bundle="${langProperties.source.bundle}"
		           forceoverwrite="yes"
		           bundlelanguage=""
		           bundlecountry=""
		           bundlevariant=""
		           srcencoding="${translation.encoding}"
		           destencoding="${translation.encoding}"
		           bundleencoding="${translation.encoding}">
			<fileset file="${temp.workingTranslationFile}" />
		</translate>

		<!-- 
			The current name is FullPathOfTranslatedText/lang.properties.template
			Let's rename it to the target file.
		-->
		<move file="${translation.text.applet.dir}/${langProperties.template.filename}"
		      tofile="${param.file}" />

		<!--
			The objective for all that is to create the file that'll go in the applet
			package. 
		-->
		<native2ascii src="${translation.text.applet.dir}"
		              dest="${translation.applet.package.lang}"
		              includes="${param.filename}"
		              encoding="${translation.encoding}" />

		<!--
			We now generate the HTML page, that will be displayed to potential translator, who do not
			have access to the SVN. This page is available on the jupload project web site.
		-->
		<loadfile srcFile="${param.file}"
		          property="temp.translation.applet.result"
		          encoding="${translation.encoding}" />
		<!--
			Let's load the Coppermine translation part exists on the current computer. Otherwise, the next part 
			of the script uses the translation given with the applet package, which is probably out of date.
		-->
		<if>
			<not>
				<available file="${coppermineTranslation.src.lang.dir}/english.php" />
			</not>

			<then>
				<echo level="warning"
				      message="Coppermine path doesn't exist: ${coppermineTranslation.src.lang.dir}" />
			</then>

			<else>
				<if>
					<or>
						<not>
							<isset property="param.java.coppermine.language" />
						</not>
						<equals arg1="${param.java.coppermine.language}"
						        arg2="" />
					</or>
					<then>
						<!-- No translation: we display the English version -->
						<loadfile srcFile="${coppermineTranslation.src.lang.dir}/english.php"
						          property="temp.translation.copperminePlugin.filecontent"
						          encoding="UTF-8" />
					</then>
					<else>
						<loadfile srcFile="${coppermineTranslation.src.lang.dir}/${param.java.coppermine.language}.php"
						          property="temp.translation.copperminePlugin.filecontent"
						          encoding="UTF-8" />
					</else>
				</if>
			</else>
		</if>
		<!-- To have a correct display, let's replace < by &lt; -->
		<propertyregex property="temp.translation.copperminePlugin.result"
		               input="${temp.translation.copperminePlugin.filecontent}"
		               regexp="&#60;"
		               global="true"
		               replace="&amp;lt;" />

		<copy toFile="${translation.html.dest.dir}/${param.filename}.html"
		      overwrite="true"
		      encoding="${translation.encoding}"
		      outputencoding="${translation.encoding}">
			<fileset file="${oneHtml.template.html.file}" />
			<filterset begintoken="#" endtoken="#">
				<filter token="encoding" value="${translation.encoding}" />
				<filter token="language" value="${param.file}" />
				<filter token="appletTranslation"
				        value="${temp.translation.applet.result}" />
				<filter token="copperminePluginTranslation"
				        value="${temp.translation.copperminePlugin.result}" />
			</filterset>
		</copy>

	</target>


</project>
